{
    "Start with main": {
        "prefix": "start",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "using ll = long long;",
            "using P = pair<ll, ll>;",
            "#define rep(i, s, n) for (ll i = s; i < (ll)(n); i++)",
            "",
            "int main() {",
            "  ll N;",
            "  cin >> N;",
            "  vector<ll> A(N);",
            "  rep(i, 0, N) {",
            "    cin >> A[i];",
            "  }",
            "  $0",
            "}"
        ]
    },
    "Start Codeforces": {
        "prefix": "start codeforces",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "using ll = long long;",
            "typedef pair<ll, ll> P;",
            "#define rep(i, s, n) for (ll i = s; i < (ll)(n); i++)",
            "",
            "ll solve(ll num, vector<ll> li) {",
            "  ll ans = 0;",
            "",
            "  return ans;",
            "}",
            "",
            "int main() {",
            "  ll N;",
            "  cin >> N;",
            "  rep(i, 0, N) {",
            "    ll le;",
            "    cin >> le;",
            "    vector<ll> li(le);",
            "    rep(j, 0, le) {",
            "      cin >> li[j];",
            "    }",
            "    cout << solve(le, li) << endl;",
            "  }",
            "}"
        ]
    },
    "Easy for": {
        "prefix": "for ",
        "body": [
            "for (ll i = 0; i < ${1:n}; i++) {$0",
            "}"
        ]
    },
    "Easy if": {
        "prefix": "if ",
        "body": [
            "if ($1) {$0",
            "}"
        ]
    },
    "Easy output": {
        "prefix": "cout << ",
        "body": [
            "cout << ${1:output} << endl;"
        ]
    },
    "Yes or No": {
        "prefix": "yes or no",
        "body": [
            "cout << (${1:flag} ? \"Yes\" : \"No\") << endl;"
        ]
    },
    "Cout Vector": {
        "prefix": "cout vector",
        "body": [
            "for (auto item : ${1:vec}) {",
            "  cout << item << \", \";",
            "}",
            "cout << endl;"
        ]
    },
    "Cout VecVec": {
        "prefix": "cout vec vec",
        "body": [
            "for (auto vec : ${1:vecvec}) {",
            "  for (auto item : vec) {",
            "    cout << item << \", \";",
            "  }",
            "  cout << \".\" << endl;",
            "}"
        ]
    },
    "Cout VecVecVec": {
        "prefix": "cout vec vec vec",
        "body": [
            "for (auto veve : ${1:vecvecvec}) {",
            "  for (auto ve : veve) {",
            "    for (auto item : ve) {",
            "      cout << item << \", \";",
            "    }",
            "    cout << \".\" << endl;",
            "  }",
            "  cout << \"---\" << endl;",
            "}"
        ]
    }
}